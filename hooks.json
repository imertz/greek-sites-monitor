{"total_tokens":3292,"files":[{"path":"ecosystem.config.js","tokens":82,"contents":"module.exports = {\n  apps: [\n    {\n      name: \"greek-sites-monitor\",\n      script: \"monitor.js\",\n      watch: true,\n      max_memory_restart: \"1G\",\n      env: {\n        NODE_ENV: \"production\",\n      },\n      error_file: \"logs/error.log\",\n      out_file: \"logs/output.log\",\n      time: true,\n    },\n  ],\n};\n"},{"path":"monitor.js","tokens":2959,"contents":"const axios = require(\"axios\");\nconst Database = require(\"better-sqlite3\");\nconst https = require(\"https\");\nconst fs = require(\"node:fs\");\nconst path = require(\"node:path\");\n\n// Ignore SSL certificate errors\nconst agent = new https.Agent({\n  rejectUnauthorized: false,\n});\n\nclass GreekSiteMonitor {\n  constructor(dbPath = \"site_status.db\") {\n    this.dbPath = dbPath;\n    this.timeout = 10000; // 10 seconds\n    this.db = new Database(dbPath);\n    this.db.pragma(\"journal_mode = WAL\");\n\n    // Initialize database\n    this.initializeDb();\n\n    // Axios instance with custom config\n    this.axiosInstance = axios.create({\n      timeout: this.timeout,\n      httpsAgent: agent,\n      maxRedirects: 3,\n      validateStatus: function (status) {\n        return status \u003e= 200 \u0026\u0026 status \u003c 600;\n      },\n    });\n    // List of important Greek websites to monitor\n    this.sites = {\n      \"gov.gr\": \"https://www.gov.gr\",\n      gsis: \"https://www.gsis.gr\",\n      efka: \"https://www.efka.gov.gr\",\n      ktimalogio: \"https://www.ktimatologio.gr\",\n      \"et.gr\": \"https://www.et.gr\",\n      oaed: \"https://www.dypa.gov.gr\",\n      immigration: \"https://migration.gov.gr\",\n      passport: \"https://www.passport.gov.gr\",\n      eopyy: \"https://www.eopyy.gov.gr\",\n\n      // Ministries\n      ministry_digital: \"https://mindigital.gr\",\n      ministry_finance: \"https://www.minfin.gr\",\n      ministry_foreign: \"https://www.mfa.gr\",\n      ministry_interior: \"https://www.ypes.gr\",\n      ministry_education: \"https://www.minedu.gov.gr\",\n      ministry_health: \"https://www.moh.gov.gr\",\n      ministry_justice: \"https://www.ministryofjustice.gr\",\n      ministry_culture: \"https://www.culture.gov.gr\",\n      ministry_tourism: \"https://mintour.gov.gr\",\n\n      // Education\n      eudoxus: \"https://eudoxus.gr\",\n      myschool: \"https://myschool.sch.gr\",\n      uoa: \"https://www.uoa.gr\",\n      auth: \"https://www.auth.gr\",\n      ntua: \"https://www.ntua.gr\",\n      upatras: \"https://www.upatras.gr\",\n\n      // Transportation\n      oasa: \"https://www.oasa.gr\",\n      trainose: \"https://www.hellenictrain.gr\",\n      athens_airport: \"https://www.aia.gr\",\n      oasth: \"https://oasth.gr\",\n\n      // Utilities \u0026 Services\n      eydap: \"https://www.eydap.gr\",\n      elta: \"https://www.elta.gr\",\n      cosmote: \"https://www.cosmote.gr\",\n      nova: \"https://www.nova.gr\",\n      vodafone: \"https://www.vodafone.gr\",\n\n      // Emergency Services\n      ekav: \"https://www.ekab.gr\",\n      civilprotection: \"https://www.civilprotection.gr\",\n      fireservice: \"https://www.fireservice.gr\",\n      astynomia: \"https://www.astynomia.gr\",\n\n      // Banking\n      bankofgreece: \"https://www.bankofgreece.gr\",\n      nbg: \"https://www.nbg.gr\",\n      alpha: \"https://www.alpha.gr\",\n      eurobank: \"https://www.eurobank.gr\",\n\n      // News \u0026 Media\n      ert: \"https://www.ert.gr\",\n      kathimerini: \"https://www.kathimerini.gr\",\n      tovima: \"https://www.tovima.gr\",\n      naftemporiki: \"https://www.naftemporiki.gr\",\n      \"in.gr\": \"https://www.in.gr\",\n\n      // Weather \u0026 Environment\n      emy: \"https://www.emy.gr\",\n      meteo: \"https://www.meteo.gr\",\n      noa: \"https://www.noa.gr\",\n\n      // Sports\n      gga: \"https://gga.gov.gr\",\n      epo: \"https://www.epo.gr\",\n      oaka: \"https://www.oaka.com.gr\",\n    };\n  }\n\n  initializeDb() {\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS site_status (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        site_name TEXT,\n        url TEXT,\n        status_code INTEGER,\n        response_time REAL,\n        is_up INTEGER,\n        error_message TEXT,\n        timestamp DATETIME\n      )\n    `);\n\n    // Prepare statements for better performance\n    this.insertStmt = this.db.prepare(`\n      INSERT INTO site_status \n      (site_name, url, status_code, response_time, is_up, error_message, timestamp)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    this.getLatestStmt = this.db.prepare(`\n      SELECT * FROM site_status\n      WHERE id IN (\n        SELECT MAX(id)\n        FROM site_status\n        GROUP BY site_name\n      )\n      ORDER BY site_name\n    `);\n  }\n\n  async checkSite(siteName, urlConfig) {\n    const startTime = Date.now();\n    let url, options;\n\n    if (typeof urlConfig === \"string\") {\n      url = urlConfig;\n      options = {};\n    } else {\n      url = urlConfig.url;\n      options = {\n        maxRedirects: urlConfig.maxRedirects || 5,\n        specialHandling: urlConfig.specialHandling || false,\n      };\n    }\n\n    try {\n      const response = await this.axiosInstance.get(url, {\n        ...options,\n        maxRedirects: options.maxRedirects,\n      });\n\n      const responseTime = (Date.now() - startTime) / 1000;\n\n      return {\n        site_name: siteName,\n        url,\n        status_code: response.status,\n        response_time: responseTime,\n        is_up: response.status \u003e= 200 \u0026\u0026 response.status \u003c 400 ? 1 : 0, // Convert boolean to integer\n        error_message: null,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      const errorMessage = this.formatError(error);\n      console.error(`Error checking ${siteName} (${url}):`, errorMessage);\n\n      return {\n        site_name: siteName,\n        url,\n        status_code: error.response?.status || null,\n        response_time: null,\n        is_up: 0, // Convert boolean to integer\n        error_message: errorMessage,\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }\n\n  formatError(error) {\n    if (error.code === \"ERR_FR_TOO_MANY_REDIRECTS\") return \"Too many redirects\";\n    if (error.code === \"ECONNREFUSED\") return \"Connection refused\";\n    if (error.code === \"ECONNABORTED\") return \"Connection timed out\";\n    if (error.code === \"ENOTFOUND\") return \"DNS lookup failed\";\n    return error.message || \"Unknown error\";\n  }\n\n  saveStatus(status) {\n    this.insertStmt.run(\n      status.site_name,\n      status.url,\n      status.status_code,\n      status.response_time,\n      status.is_up,\n      status.error_message,\n      status.timestamp\n    );\n  }\n\n  async checkAllSites() {\n    const batchSize = 5;\n    const sites = Object.entries(this.sites);\n\n    // Use a transaction for better performance\n    const transaction = this.db.transaction((statuses) =\u003e {\n      for (const status of statuses) {\n        this.saveStatus(status);\n      }\n    });\n\n    for (let i = 0; i \u003c sites.length; i += batchSize) {\n      const batch = sites.slice(i, i + batchSize);\n      const promises = batch.map(([siteName, urlConfig]) =\u003e\n        this.checkSite(siteName, urlConfig)\n      );\n\n      const results = await Promise.allSettled(promises);\n      const validResults = results\n        .filter((result) =\u003e result.status === \"fulfilled\")\n        .map((result) =\u003e result.value);\n\n      // Execute transaction with batch results\n      transaction(validResults);\n\n      // Log results\n      for (const status of validResults) {\n        console.log(\n          `Checked ${status.site_name}: ${status.is_up ? \"UP\" : \"DOWN\"}${\n            status.error_message ? ` (${status.error_message})` : \"\"\n          }`\n        );\n      }\n    }\n  }\n\n  getLatestStatus() {\n    const results = this.getLatestStmt.all();\n    // Convert integer back to boolean for display\n    return results.map((result) =\u003e ({\n      ...result,\n      is_up: result.is_up === 1,\n    }));\n  }\n\n  async startScheduledMonitoring(intervalMinutes = 1) {\n    console.log(\n      `Starting scheduled monitoring every ${intervalMinutes} minute(s)...`\n    );\n\n    // Initial run\n    await this.runMonitoringCycle();\n\n    // Schedule subsequent runs\n    setInterval(async () =\u003e {\n      await this.runMonitoringCycle();\n    }, intervalMinutes * 60 * 1000);\n  }\n\n  async runMonitoringCycle() {\n    const startTime = new Date();\n    console.log(\n      `\\nStarting monitoring cycle at ${startTime.toLocaleString(\"en-US\", {\n        timeZone: \"Europe/Athens\",\n      })}`\n    );\n\n    try {\n      await this.checkAllSites();\n\n      console.log(\"\\nLatest status for all sites:\");\n      const latestStatus = this.getLatestStatus();\n\n      // Format the status data\n      const statusData = {\n        lastUpdated: new Date().toISOString(),\n        console: latestStatus,\n        sites: latestStatus.map((status) =\u003e ({\n          name: status.site_name,\n          url: status.url,\n          isUp: status.is_up,\n          responseTime: status.response_time,\n          statusCode: status.status_code,\n          error: status.error_message || null,\n          lastChecked: status.timestamp,\n          // Add category based on the site name\n          category: this.getSiteCategory(status.site_name),\n        })),\n      };\n\n      // Save to JSON file\n      const publicDir = path.join(__dirname, \"public\");\n      if (!fs.existsSync(publicDir)) {\n        fs.mkdirSync(publicDir);\n      }\n      fs.writeFileSync(\n        path.join(publicDir, \"latest-status.json\"),\n        JSON.stringify(statusData, null, 2)\n      );\n\n      console.table(\n        latestStatus.map((status) =\u003e ({\n          Site: status.site_name,\n          Status: status.is_up ? \"UP\" : \"DOWN\",\n          \"Response Time\": status.response_time\n            ? `${status.response_time.toFixed(2)}s`\n            : \"N/A\",\n          Error: status.error_message || \"None\",\n          \"Last Checked\": new Date(status.timestamp).toLocaleString(\"en-US\", {\n            timeZone: \"Europe/Athens\",\n          }),\n        }))\n      );\n\n      const endTime = new Date();\n      const duration = (endTime - startTime) / 1000;\n      console.log(\n        `\\nMonitoring cycle completed in ${duration.toFixed(2)} seconds`\n      );\n    } catch (error) {\n      console.error(\"Error during monitoring cycle:\", error);\n    }\n  }\n\n  // Helper method to determine site category\n  getSiteCategory(siteName) {\n    const categories = {\n      government: [\n        \"gov.gr\",\n        \"gsis\",\n        \"efka\",\n        \"ktimalogio\",\n        \"et.gr\",\n        \"oaed\",\n        \"immigration\",\n        \"passport\",\n        \"eopyy\",\n      ],\n      ministries: [\n        \"ministry_digital\",\n        \"ministry_finance\",\n        \"ministry_foreign\",\n        \"ministry_interior\",\n        \"ministry_education\",\n        \"ministry_health\",\n        \"ministry_justice\",\n        \"ministry_culture\",\n        \"ministry_tourism\",\n      ],\n      education: [\"eudoxus\", \"myschool\", \"uoa\", \"auth\", \"ntua\", \"upatras\"],\n      transportation: [\"oasa\", \"trainose\", \"athens_airport\", \"oasth\"],\n      utilities: [\"eydap\", \"elta\", \"cosmote\", \"nova\", \"vodafone\"],\n      emergency: [\"ekav\", \"civilprotection\", \"fireservice\", \"astynomia\"],\n      banking: [\"bankofgreece\", \"nbg\", \"alpha\", \"eurobank\"],\n      media: [\"ert\", \"kathimerini\", \"tovima\", \"naftemporiki\", \"in.gr\"],\n      weather: [\"emy\", \"meteo\", \"noa\"],\n      sports: [\"gga\", \"epo\", \"oaka\"],\n    };\n\n    for (const [category, sites] of Object.entries(categories)) {\n      if (sites.includes(siteName)) {\n        return category;\n      }\n    }\n    return \"other\";\n  }\n  shutdown() {\n    try {\n      if (this.db) {\n        // Close the database connection\n        this.db.close();\n        console.log(\"Database connection closed successfully\");\n      }\n    } catch (error) {\n      console.error(\"Error while shutting down:\", error);\n    }\n  }\n}\n\n// Example usage with scheduled monitoring\nlet monitor = null;\n\nasync function main() {\n  monitor = new GreekSiteMonitor();\n\n  try {\n    // Start monitoring every 1 minute\n    await monitor.startScheduledMonitoring(1);\n  } catch (error) {\n    console.error(\"Error in main:\", error);\n    if (monitor) monitor.shutdown();\n    process.exit(1);\n  }\n\n  // Handle graceful shutdown\n  process.on(\"SIGINT\", () =\u003e {\n    console.log(\"\\nReceived SIGINT. Closing database and exiting...\");\n    if (monitor) monitor.shutdown();\n    process.exit(0);\n  });\n\n  process.on(\"SIGTERM\", () =\u003e {\n    console.log(\"\\nReceived SIGTERM. Closing database and exiting...\");\n    if (monitor) monitor.shutdown();\n    process.exit(0);\n  });\n}\n\nif (require.main === module) {\n  main().catch(console.error);\n}\n\nmodule.exports = GreekSiteMonitor;\n"},{"path":"package.json","tokens":333,"contents":"{\n  \"name\": \"greek-sites-monitor\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Node.js application for monitoring the availability and response times of important Greek websites\",\n  \"main\": \"monitor.js\",\n  \"scripts\": {\n    \"start\": \"node monitor.js\",\n    \"monitor\": \"node monitor.js\",\n    \"start:pm2\": \"pm2 start ecosystem.config.js\",\n    \"stop:pm2\": \"pm2 stop greek-sites-monitor\",\n    \"logs\": \"pm2 logs greek-sites-monitor\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/imertz/greek-sites-monitor.git\"\n  },\n  \"keywords\": [\n    \"monitoring\",\n    \"uptime\",\n    \"greece\",\n    \"websites\",\n    \"status\",\n    \"government\",\n    \"services\"\n  ],\n  \"author\": {\n    \"name\": \"Ioannis Mertzanis\",\n    \"email\": \"imertz@protonmail.com\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/imertz/greek-sites-monitor/issues\"\n  },\n  \"homepage\": \"https://github.com/imertz/greek-sites-monitor#readme\",\n  \"dependencies\": {\n    \"axios\": \"^1.7.9\",\n    \"better-sqlite3\": \"^11.7.0\"\n  },\n  \"engines\": {\n    \"node\": \"\u003e=14.0.0\"\n  }\n}\n"}],"file_count":3}